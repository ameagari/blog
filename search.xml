<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/uncategorized/hello-world/"/>
      <url>/uncategorized/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WordPress实现多域名访问</title>
      <link href="/wordpress/wordpress-multidomian-setting/"/>
      <url>/wordpress/wordpress-multidomian-setting/</url>
      
        <content type="html"><![CDATA[<blockquote><p>默认情况下，Wordpress会在安装时自动获取当前的域名或者IP，并与当前访问的端口后组装成URL放在设置字段，用户可以按照需求自行修改。当用户想通过不同的域名来访问该Wordpress时，总会被自动跳转到设置中的URL，因此实现多域名访问需要一定的修改。</p></blockquote><h2 id="常规修改方案"><a href="#常规修改方案" class="headerlink" title="常规修改方案"></a>常规修改方案</h2><p>默认情况下，通过设置-&gt;常规界面可以修改当前站点的WordPress地址（URL）和站点地址（URL），wordpress会固定使用这两个URL地址进行访问，如下图所示。</p><h2 id="使Wordpress支持多域名"><a href="#使Wordpress支持多域名" class="headerlink" title="使Wordpress支持多域名"></a>使Wordpress支持多域名</h2><p>网上很容易搜索到解决方法，大部分帖子提供的方法是修改<strong>wp-config.php</strong>文件，写入以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define(&#x27;WP_SITEURL&#x27;, &#x27;http://&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;]);</span><br><span class="line">define(&#x27;WP_HOME&#x27;, &#x27;http://&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;]);</span><br></pre></td></tr></table></figure><p>原理说起来其实很简单，通过$_SERVER语法获取当前访问的HOST信息，填入对应的环境变量WP_SITEURL和WP_HOME，这时我们通过任意域名访问后可以发现，在设置中对应的配置已经变成我们当前访问的域名，同时变为灰色且无法修改。但这种简单的脚本缺陷显而易见，不支持HTTPS，如果我们想通过https来访问，会指向http域名，导致出错，这里提供一个可以兼容HTTP和HTTPS的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pageURL</span> = <span class="string">&#x27;http&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTPS&quot;</span>] == <span class="string">&quot;on&quot;</span>) &#123;<span class="variable">$pageURL</span> .= <span class="string">&quot;s&quot;</span>;&#125;</span><br><span class="line"><span class="variable">$pageURL</span> .= <span class="string">&quot;://&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_PORT&quot;</span>] != <span class="string">&quot;80&quot;</span> <span class="keyword">and</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_PORT&quot;</span>] != <span class="string">&quot;443&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$pageURL</span> .= <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_NAME&quot;</span>].<span class="string">&quot;:&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_PORT&quot;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$pageURL</span> .= <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_NAME&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">&#x27;WP_SITEURL&#x27;</span>, <span class="variable">$pageURL</span>);</span><br><span class="line">define(<span class="string">&#x27;WP_HOME&#x27;</span>, <span class="variable">$pageURL</span>);</span><br></pre></td></tr></table></figure><p>基本原理就是通过解析url，判断是否为https，如果是则动态添加一个”s”到pageURL变量。</p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>如下所示，能够完美的支持http，https和端口号配置。</p>]]></content>
      
      
      <categories>
          
          <category> wordpress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Framework 原理解析</title>
      <link href="/Java/Spring/spring-framework-research/"/>
      <url>/Java/Spring/spring-framework-research/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring是什么？"><a href="#Spring是什么？" class="headerlink" title="Spring是什么？"></a>Spring是什么？</h2><blockquote><p>Spring框架是一个<strong>开放源代码</strong>的<strong>J2EE应用程序框架</strong>，由<strong>Rod Johnson</strong>发起，是针对bean的<strong>生命周期</strong>进行管理的<strong>轻量级容器</strong>。 Spring解决了开发者在J2EE开发中遇到的许多常见的问题，提供了功能强大<strong>IOC</strong>、<strong>AOP</strong>及<strong>Web MVC</strong>等功能。Spring框架主要由七部分组成，分别是 <strong>Spring Core</strong>、 <strong>Spring AOP</strong>、 <strong>Spring ORM</strong>、 <strong>Spring DAO</strong>、<strong>Spring Context</strong>、 <strong>Spring Web</strong>和 <strong>Spring Web MVC</strong>。</p></blockquote><h2 id="为什么要用Spring"><a href="#为什么要用Spring" class="headerlink" title="为什么要用Spring?"></a>为什么要用Spring?</h2><blockquote><p>“Spring makes programming Java quicker, easier, and safer for everybody. “</p></blockquote><p>以上是官方给出的理由，翻译过来也非常直白，即Spring能让我们开发Java程序变得更加<strong>快速</strong>、简洁和<strong>安全</strong>。例如在日常开发中，我们可以：</p><ul><li>用Spring的@Autowired，@Resource标签来获取类实例时，而不需要一层一层的传递这些实例。</li><li>用各种操作日志、数据库事务AOP来增强代码功能，而不需要不停的修改业务代码。</li><li>用JPA来进行数据库操作，而不需要重复的编写一条条的SQL语句。</li></ul><p>总的来说，Spring的确做到了它承诺的一切。</p><h2 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h2><p>【图】</p><p>那么，拥有上面这些功能的Spring是否是一款超级大的三方件？答案是否。</p><p>有意思的是，Spring本身就是为了解决企业应用程序开发的复杂性而创造的，它的基因决定了它一定不会奔着“大而全”而去。</p><p>实际上，Spring的哲学是《最少的侵入》。<br>从上面几个例子来看，你会发现，Spring实现的这些功能会有许多不同的实现方案，例如容器技术就有历史悠久的EJB，数据库连接就有我们常用的mybatis,Spring Boot对于有固定模板的我们公司来说，压根没用。但同时，我们还会发现，我们可以很轻易的替换掉Spring的功能，因为其Spring的代码侵入量极少。例如Bean管理只需要在配置文件或者类数据定义时编码即可，随时可以自己new一个对象。新版本更是可以通过构造函数来避免使用注解。<br>非侵入式，即允许在应用系统中自由选择和组装Spring框架的各个功能模块，并且不强制要求应用系统的类必须继承或实现Spring框架的类和接口来达到使用框架的目的，使得所开发出来的应用系统能够在不同的运行环境或平台上自由移植，仅需要进行适配修改，而不需要修改核心代码。</p><p>Spring的体系结构</p><p>Spring如何实现非侵入式<br>引用反射机制，通过动态调用的方式来提供各方面的功能，建立核心组件BeanFactory<br>配合使用Spring框架中的BeanWrapper和BeanFactory组件类最终达到对象的实例创建和属性注入</p><h2 id="Tomcat加载Spring-MVC和Spring容器的过程"><a href="#Tomcat加载Spring-MVC和Spring容器的过程" class="headerlink" title="Tomcat加载Spring MVC和Spring容器的过程"></a>Tomcat加载Spring MVC和Spring容器的过程</h2><blockquote><p>参考资料：<a href="https://www.cnblogs.com/top-housekeeper/p/14105297.html#_label2">https://www.cnblogs.com/top-housekeeper/p/14105297.html#_label2</a></p></blockquote><p>一个典型包含spring MVC框架的webapp配置如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以下为加载Spring需要的配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring配置具体参数的地方--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">    classpath:applicationContext.xml</span><br><span class="line">  <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring启动的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--以下为加载SpringMVC需要的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>project<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>   <span class="comment">&lt;!--servlet被加载的顺序，值越小优先级越高（正数）--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>project<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们知道，tomcat可以容纳多个webapp，每一个webapp对一个servlet，<br>tomcat根据所有的web.xml配置形成一个索引，根据url进行匹配并发送到对应的servlet，例如在上面的url-pattern为*.html。那么当tomcat接收到对应请求时，便会将请求发送到名为project的servlet。</p><p>从tomcat的生命周期我们可以知道，上面示例中首先会被加载的是ContextLoaderListener，其init方法为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the root web application context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        initWebApplicationContext(event.getServletContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟踪代码我们可以发现，ContextLoaderListener初始化了一个WebApplicationContext，这便是我们的根applicationContext。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
